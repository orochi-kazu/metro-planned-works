{"version":3,"sources":["feature/EmptyContent/logo.svg","feature/bookends/Header.jsx","feature/TotalAlerts/TotalAlerts.jsx","feature/LastUpdate/LastUpdate.jsx","feature/Attrib/Attrib.jsx","feature/bookends/Footer.jsx","feature/EmptyContent/EmptyContent.jsx","feature/SearchResults/AlertDetail/AlertDetail.jsx","feature/SearchResults/SearchResults.jsx","api/alertDetailsClient.js","api/store.js","domain/alerts.js","config/depGraph.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","AlertsBadge","_ref","count","type","concat","TotalAlerts","_ref2","alerts","TotalAlerts_AlertsBadge","total","ingested","pending","LastUpdate","lastUpdate","Attrib","href","Footer","TotalAlerts_TotalAlerts","LastUpdate_LastUpdate","Attrib_Attrib","EmptyContent","src","logo","alt","Uningested","Outage","area","from","to","iso","AlertDetail","id","outages","link","target","rel","map","it","i","AlertDetail_Outage","Object","assign","key","AlertDetail_Uningested","SearchResults","results","AlertDetail_AlertDetail","alertDetailsClient","detailsLocation","fetch","_fetch","apply","this","arguments","toString","then","response","json","details","fetchDate","releaseDate","store","save","alertDetails","lastUpdated","alertCounts","length","filter","calculateAlertCounts","asyncToGenerator","regenerator_default","mark","_callee","detailsClient","wrap","_context","prev","next","sent","abrupt","stop","_x","buildDepGraph","alertsManager","process","domain","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","graph","setState","Header_Header","SearchResults_SearchResults","EmptyContent_EmptyContent","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec37ad27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5901d734.svg\";","import React from 'react'\n\nimport './style.css'\n\nconst Header = () => (\n  <header>\n    <span className='title'><span className='icon'>âš </span> Legible Works</span>\n  </header>\n)\n\nexport { Header }\n","import React from 'react'\n\nimport './style.css'\n\nconst AlertsBadge = ({ count, type }) => (\n  <span className={`alert ${type}`}>\n    {count || '?'}\n  </span>\n)\n\nconst TotalAlerts = ({ alerts }) => (\n  <div>\n    <AlertsBadge count={alerts.total} type='total' /> alerts\n    (<AlertsBadge count={alerts.ingested} type='ingested' /> ingested,\n    {` `}<AlertsBadge count={alerts.pending} type='pending' /> pending)\n  </div>\n)\n\nexport { TotalAlerts }\n","import React from 'react'\n\nimport './style.css'\n\nconst LastUpdate = ({ lastUpdate }) => (\n  <div>\n    Last updated: <span className='updated'>{lastUpdate}</span>\n  </div>\n)\n\nexport { LastUpdate }\n","import React from 'react'\n\nimport './style.css'\n\nconst Attrib = () => (\n  <div>\n    Licensed under AGPL 3+.\n    Source at <a href='https://github.com/orochi-kazu/metro-planned-works'>GitHub</a>\n  </div>\n)\n\nexport { Attrib }\n","import React from 'react'\n\nimport { TotalAlerts } from '../TotalAlerts'\nimport { LastUpdate } from '../LastUpdate'\nimport { Attrib } from '../Attrib'\nimport './style.css'\n\nconst Footer = ({ alerts, lastUpdate }) => (\n  <footer>\n    <TotalAlerts {...{ alerts }} />\n    <LastUpdate {...{ lastUpdate }} />\n    <Attrib />\n  </footer>\n)\n\nexport { Footer }\n","import React from 'react'\n\nimport logo from './logo.svg'\nimport './style.css'\n\nconst EmptyContent = () => (\n  <div className='empty-content'>\n    <img className='logo' src={logo} alt='App logo: a caution sign' />\n  </div>\n)\n\nexport { EmptyContent }\n","import React from 'react'\n\nimport './style.css'\n\nconst Uningested = () => (\n  <div className='outage uningested bordered'>\n    Pending\n  </div>\n)\n\nconst Outage = ({ area, from, to }) => (\n  <div className='outage bordered'>\n    <div>{area}</div>\n    <div>Starts: {from.iso}</div>\n    <div>Ends: {to.iso}</div>\n  </div>\n)\n\nconst AlertDetail = ({ id, outages, link }) => (\n  <div className='detail bordered'>\n    <div className='alert-title'>\n      <span>{id}</span>\n      <span><a href={link} target='_blank' rel='noopener noreferrer'>Metro</a></span>\n    </div>\n    <div>\n      {outages ? outages.map((it, i) => <Outage {...it} key={i} />) : <Uningested />}\n    </div>\n  </div>\n)\n\nexport { AlertDetail }\n","import React from 'react'\n\nimport { AlertDetail } from './AlertDetail'\n\nconst SearchResults = ({ results }) => results.map(it => <AlertDetail {...it} key={it.id} />)\n\nexport { SearchResults }\n","const alertDetailsClient = detailsLocation => ({\n  fetch: () => fetch(detailsLocation).then(response => response.json())\n})\n\nexport { alertDetailsClient }\n","let details = {\n  fetchDate: 'Unknown',\n  releaseDate: 'Unknown',\n  alerts: []\n}\n\nconst calculateAlertCounts = () => {\n  const total = details.alerts.length\n  const ingested = details.alerts.filter(it => it.outages).length\n  const pending = total - ingested\n\n  return { total, ingested, pending }\n}\n\nconst store = {\n  save: alertDetails => { details = alertDetails },\n  lastUpdated: () => details.releaseDate,\n  alertCounts: () => calculateAlertCounts(),\n  alerts: () => details.alerts\n}\n\nexport { store }\n","const alerts = async ({ detailsClient, store }) => {\n  const details = await detailsClient.fetch()\n  store.save(details)\n\n  return {\n    lastUpdated: () => store.lastUpdated(),\n    alertCounts: () => store.alertCounts(),\n    alertDetails: () => store.alerts()\n  }\n}\n\nexport { alerts }\n","import { alertDetailsClient, store } from '../api'\nimport { alerts } from '../domain'\n\nconst detailsUrl = process.env.NODE_ENV === 'development'\n  ? `${process.env.PUBLIC_URL}/alert_details.json`\n  : process.env.REACT_APP_ALERT_DETAILS_URL\n\nconst buildDepGraph = async () => {\n  const detailsClient = alertDetailsClient(detailsUrl)\n  const alertsManager = await alerts({ detailsClient, store })\n\n  return {\n    domain: { alerts: alertsManager }\n  }\n}\n\nexport { buildDepGraph }\n","import React, { Component } from 'react'\n\nimport { Header, Footer } from './feature/bookends'\nimport { EmptyContent } from './feature/EmptyContent'\nimport { SearchResults } from './feature/SearchResults'\nimport './App.css'\n\nimport { buildDepGraph } from './config'\nlet alertsManager = null\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      alertCounts: {},\n      lastUpdated: 'Unknown',\n      alertDetails: []\n    }\n\n    buildDepGraph().then(graph => {\n      alertsManager = graph.domain.alerts\n\n      this.setState({\n        lastUpdated: alertsManager.lastUpdated(),\n        alertCounts: alertsManager.alertCounts(),\n        alertDetails: alertsManager.alertDetails()\n      })\n    })\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <Header />\n        <div className='content'>\n          {(this.state.alertDetails || []).length > 0\n            ? <SearchResults results={this.state.alertDetails} />\n            : <EmptyContent />\n          }\n        </div>\n        <Footer alerts={this.state.alertCounts} lastUpdate={this.state.lastUpdated} />\n      </div>\n    )\n  }\n}\n\nexport { App }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}