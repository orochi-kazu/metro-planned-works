{"version":3,"sources":["feature/EmptyContent/logo.svg","feature/bookends/Header.jsx","feature/TotalAlerts/TotalAlerts.jsx","feature/LastUpdate/LastUpdate.jsx","feature/Attrib/Attrib.jsx","feature/bookends/Footer.jsx","feature/EmptyContent/EmptyContent.jsx","serviceWorker.js","index.jsx","App.jsx"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","AlertsBadge","_ref","count","type","concat","cannedAlerts","total","ingested","pending","TotalAlerts","_ref2","_ref2$alerts","alerts","TotalAlerts_AlertsBadge","LastUpdate","lastUpdate","Attrib","href","Footer","TotalAlerts_TotalAlerts","LastUpdate_LastUpdate","Attrib_Attrib","EmptyContent","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","Header_Header","EmptyContent_EmptyContent","Footer_Footer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4PCIlCC,cAAS,kBACbC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,UAAxB,qBCFEC,SAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,KAAV,OAClBP,EAAAC,EAAAC,cAAA,QAAMC,UAAS,SAAAK,OAAWD,IACvBD,KAICG,EAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIC,QAAS,GAEnDC,EAAc,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,cAAH,IAAAD,EAAYN,EAAZM,EAAA,OAClBf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,CAAaX,MAAOU,EAAON,MAAOH,KAAK,UADzC,YAEGP,EAAAC,EAAAC,cAACe,EAAD,CAAaX,MAAOU,EAAOL,SAAUJ,KAAK,aAF7C,iBAGOP,EAAAC,EAAAC,cAACe,EAAD,CAAaX,MAAOU,EAAOJ,QAASL,KAAK,YAHhD,cCPIW,SAAa,SAAAb,KAAGc,WAAH,OACjBnB,EAAAC,EAAAC,cAAA,4BACgBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAJf,iBCAbiB,SAAS,kBACbpB,EAAAC,EAAAC,cAAA,gDAEYF,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,sDAAR,aCARC,EAAS,kBACbtB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,wBCNEC,SAAe,kBACnB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOwB,IAAKC,IAAMC,IAAI,sCCKrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cCAJ,kBACVF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACoC,EAAD,OAEFtC,EAAAC,EAAAC,cAACqC,EAAD,QDNY,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eb623956.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5901d734.svg\";","import React from 'react'\n\nimport './style.css'\n\nconst Header = () => (\n  <header>\n    <span className='title'><span className='icon'>âš </span> Legible Works</span>\n  </header>\n)\n\nexport { Header }\n","import React from 'react'\n\nimport './style.css'\n\nconst AlertsBadge = ({ count, type }) => (\n  <span className={`alert ${type}`}>\n    {count}\n  </span>\n)\n\nconst cannedAlerts = { total: 20, ingested: 11, pending: 9 }\n\nconst TotalAlerts = ({ alerts = cannedAlerts }) => (\n  <div>\n    <AlertsBadge count={alerts.total} type='total' /> alerts\n    (<AlertsBadge count={alerts.ingested} type='ingested' /> ingested,\n    {` `}<AlertsBadge count={alerts.pending} type='pending' /> pending)\n  </div>\n)\n\nexport { TotalAlerts }\n","import React from 'react'\n\nimport './style.css'\n\nconst cannedDate = '2019-06-16'\n\nconst LastUpdate = ({ lastUpdate = cannedDate }) => (\n  <div>\n    Last updated: <span className='updated'>{cannedDate}</span>\n  </div>\n)\n\nexport { LastUpdate }\n","import React from 'react'\n\nimport './style.css'\n\nconst Attrib = () => (\n  <div>\n    Licensed under AGPL 3+.\n    Source at <a href='https://github.com/orochi-kazu/metro-planned-works'>GitHub</a>\n  </div>\n)\n\nexport { Attrib }\n","import React from 'react'\n\nimport { TotalAlerts } from '../TotalAlerts'\nimport { LastUpdate } from '../LastUpdate'\nimport { Attrib } from '../Attrib'\nimport './style.css'\n\nconst Footer = () => (\n  <footer>\n    <TotalAlerts />\n    <LastUpdate />\n    <Attrib />\n  </footer>\n)\n\nexport { Footer }\n","import React from 'react'\n\nimport logo from './logo.svg'\nimport './style.css'\n\nconst EmptyContent = () => (\n  <div className='empty-content'>\n    <img className='logo' src={logo} alt='App logo: a caution sign' />\n  </div>\n)\n\nexport { EmptyContent }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\n\nimport { Header, Footer } from './feature/bookends'\nimport { EmptyContent } from './feature/EmptyContent'\nimport './App.css'\n\nconst App = () => (\n  <div className='App'>\n    <Header />\n    <div className='content'>\n      <EmptyContent />\n    </div>\n    <Footer />\n  </div>\n)\n\n// const plannedWorksColors = {\n//   'red': '#E01414',\n//   'blue': '#0073CF',\n//   'orange': '#E17000',\n//   'purple': '#77216F',\n//   'pink': '#c313a9',\n//   'green': '#14cf00'\n// }\n\nexport { App }\n"],"sourceRoot":""}