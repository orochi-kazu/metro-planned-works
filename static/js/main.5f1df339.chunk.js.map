{"version":3,"sources":["feature/EmptyContent/logo.svg","feature/bookends/Header.jsx","feature/TotalAlerts/TotalAlerts.jsx","feature/LastUpdate/LastUpdate.jsx","feature/Attrib/Attrib.jsx","feature/bookends/Footer.jsx","feature/EmptyContent/EmptyContent.jsx","feature/SearchResults/AlertDetail/AlertDetail.jsx","feature/SearchResults/Alert/Alert.jsx","feature/SearchResults/SearchResults.jsx","api/getJsonClient.js","api/store.js","domain/alerts.js","config/depGraph.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","AlertsBadge","_ref","count","type","concat","TotalAlerts","_ref2","alerts","TotalAlerts_AlertsBadge","total","ingested","pending","LastUpdate","lastUpdate","Attrib","href","target","rel","Footer","TotalAlerts_TotalAlerts","LastUpdate_LastUpdate","Attrib_Attrib","EmptyContent","src","logo","alt","Uningested","Outage","area","from","to","desc","iso","AlertDetail","id","title","outages","link","map","it","i","AlertDetail_Outage","Object","assign","key","AlertDetail_Uningested","Alert","line","plannedWorks","getAlertDetails","getDetail","detail","AlertDetail_AlertDetail","detailById","SearchResults","results","Alert_Alert","getJsonClient","url","fetch","_fetch","apply","this","arguments","toString","then","response","json","details","fetchDate","releaseDate","store","save","healthboardAlerts","alertDetails","alertCounts","keys","length","k","filter","calculateAlertCounts","lastUpdated","idMapToList","objectSpread","convertAlerts","line_name","planned_works_list","asyncToGenerator","regenerator_default","mark","_callee","healthboardClient","detailsClient","_ref3","_ref4","healthboard","wrap","_context","prev","next","Promise","all","sent","slicedToArray","list","fromEntries","abrupt","stop","_x","publicJson","filename","process","toUpperCase","healthboardUrl","detailsUrl","buildDepGraph","alertsManager","domain","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","graph","setState","Header_Header","SearchResults_SearchResults","EmptyContent_EmptyContent","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f1df339.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5901d734.svg\";","import React from 'react'\n\nimport './style.css'\n\nconst Header = () => (\n  <header>\n    <span className='title'><span className='icon'>âš </span> Legible Works</span>\n  </header>\n)\n\nexport { Header }\n","import React from 'react'\n\nimport './style.css'\n\nconst AlertsBadge = ({ count, type }) => (\n  <span className={`alert ${type}`}>\n    {count || '?'}\n  </span>\n)\n\nconst TotalAlerts = ({ alerts }) => (\n  <div>\n    <AlertsBadge count={alerts.total} type='total' /> alert details\n    (<AlertsBadge count={alerts.ingested} type='ingested' /> ingested,\n    {` `}<AlertsBadge count={alerts.pending} type='pending' /> pending)\n  </div>\n)\n\nexport { TotalAlerts }\n","import React from 'react'\n\nimport './style.css'\n\nconst LastUpdate = ({ lastUpdate }) => (\n  <div>\n    Last updated: <span className='updated'>{lastUpdate}</span>\n  </div>\n)\n\nexport { LastUpdate }\n","import React from 'react'\n\nimport './style.css'\n\nconst Attrib = () => (\n  <div>\n    Licensed under AGPL 3+.\n    Source at <a\n      href='https://github.com/orochi-kazu/metro-planned-works'\n      target='_blank' // eslint-disable-line react/jsx-no-target-blank\n      rel='noopener'\n    >GitHub</a>\n  </div>\n)\n\nexport { Attrib }\n","import React from 'react'\n\nimport { TotalAlerts } from '../TotalAlerts'\nimport { LastUpdate } from '../LastUpdate'\nimport { Attrib } from '../Attrib'\nimport './style.css'\n\nconst Footer = ({ alerts, lastUpdate }) => (\n  <footer>\n    <TotalAlerts {...{ alerts }} />\n    <LastUpdate {...{ lastUpdate }} />\n    <Attrib />\n  </footer>\n)\n\nexport { Footer }\n","import React from 'react'\n\nimport logo from './logo.svg'\nimport './style.css'\n\nconst EmptyContent = () => (\n  <div className='empty-content'>\n    <img className='logo' src={logo} alt='App logo: a caution sign' />\n  </div>\n)\n\nexport { EmptyContent }\n","import React from 'react'\n\nimport './style.css'\n\nconst Uningested = () => (\n  <div className='outage uningested bordered'>\n    Pending\n  </div>\n)\n\nconst Outage = ({ area, from, to }) => (\n  <div className='outage bordered'>\n    <div className='outage-desc'>&quot;{area.desc}&quot;</div>\n    <div>Starts: {from.iso}</div>\n    <div>Ends: {to.iso}</div>\n  </div>\n)\n\nconst AlertDetail = ({ id, title, outages, link }) => (\n  <div className='detail bordered'>\n    <div className='alert-title'>\n      <span>\n        {title}\n        <span className='nowrap'> (<a\n          href={link}\n          target='_blank' // eslint-disable-line react/jsx-no-target-blank\n          rel='noopener'\n        >Metro</a>)\n        </span>\n      </span>\n    </div>\n    <div>\n      {outages ? outages.map((it, i) => <Outage {...it} key={i} />) : <Uningested />}\n    </div>\n  </div>\n)\n\nexport { AlertDetail }\n","import React from 'react'\n\nimport { AlertDetail } from '../AlertDetail'\n\nimport './style.css'\n\nconst detailById = getAlertDetails => (id, title) => {\n  const detail = getAlertDetails(id)\n  return detail ? <AlertDetail {...detail} title={title} key={id} /> : null\n}\n\nconst Alert = ({ id, alerts, line, plannedWorks, getAlertDetails }) => {\n  if (!plannedWorks) {\n    return null\n  }\n  const getDetail = detailById(getAlertDetails)\n  return (\n    <div className='alert-summary bordered'>\n      <div className='alert-summary-title'>\n        <span className='alert-summary-title'>{line || 'Unnamed line'}</span>\n        {line ? '' : <span>&nbsp;({id})</span>}\n      </div>\n      {plannedWorks.map(it => getDetail(it.id, it.title))}\n    </div>\n  )\n}\n\nexport { Alert }\n","import React from 'react'\n\nimport { Alert } from './Alert'\n\nconst SearchResults = ({ results, getAlertDetails }) => results.map(it => (\n  <Alert {...it} getAlertDetails={getAlertDetails} key={it.id} />\n))\n\nexport { SearchResults }\n","const getJsonClient = url => ({\n  fetch: () => fetch(url).then(response => response.json())\n})\n\nexport { getJsonClient }\n","let alerts = []\n\nlet details = {\n  alerts: {},\n  fetchDate: '',\n  releaseDate: ''\n}\n\nconst calculateAlertCounts = () => {\n  const keys = Object.keys(details.alerts)\n  const total = keys.length\n  const ingested = keys.map(k => details.alerts[k]).filter(it => it.outages).length\n  const pending = total - ingested\n\n  return { total, ingested, pending }\n}\n\nconst store = {\n  save: ({ healthboardAlerts, alertDetails }) => {\n    alerts = healthboardAlerts\n    details = alertDetails\n  },\n  alerts: () => alerts,\n  alertCounts: () => calculateAlertCounts(),\n  alertDetails: id => details.alerts[id],\n  lastUpdated: () => details.releaseDate\n}\n\nexport { store }\n","const idMapToList = map => Object.keys(map)\n  .map(it => ({\n    ...map[it],\n    id: it\n  }))\n\nconst idListToMap = list => Object.fromEntries(\n  list.map(it => [it.id, it])\n)\n\nconst convertAlerts = it => ({\n  id: it.id,\n  line: it.line_name,\n  plannedWorks: it.planned_works_list\n})\n\nconst alerts = async ({ healthboardClient, detailsClient, store }) => {\n  const [healthboard, details] = await Promise.all([\n    healthboardClient.fetch(),\n    detailsClient.fetch()\n  ])\n  const healthboardAlerts = idMapToList(healthboard).map(convertAlerts)\n  const alertDetails = { ...details, alerts: idListToMap(details.alerts) }\n  store.save({ healthboardAlerts, alertDetails })\n\n  return {\n    alerts: () => store.alerts(),\n    alertCounts: () => store.alertCounts(),\n    alertDetails: id => store.alertDetails(id),\n    lastUpdated: () => store.lastUpdated()\n  }\n}\n\nexport { alerts }\n","import { getJsonClient, store } from '../api'\nimport { alerts } from '../domain'\n\nconst publicJson = filename => process.env.NODE_ENV === 'development'\n  ? `${process.env.PUBLIC_URL}/${filename}.json`\n  : process.env[`REACT_APP_${filename.toUpperCase()}_URL`]\n\nconst healthboardUrl = publicJson('healthboard_alerts')\nconst detailsUrl = publicJson('alert_details')\n\nconst buildDepGraph = async () => {\n  const healthboardClient = getJsonClient(healthboardUrl)\n  const detailsClient = getJsonClient(detailsUrl)\n  const alertsManager = await alerts({ healthboardClient, detailsClient, store })\n\n  return {\n    domain: { alerts: alertsManager }\n  }\n}\n\nexport { buildDepGraph }\n","import React, { Component } from 'react'\n\nimport { Header, Footer } from './feature/bookends'\nimport { EmptyContent } from './feature/EmptyContent'\nimport { SearchResults } from './feature/SearchResults'\nimport './App.css'\n\nimport { buildDepGraph } from './config'\nlet alertsManager = null\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      alertCounts: {},\n      lastUpdated: 'Unknown',\n      alerts: [],\n      getAlertDetails: () => null\n    }\n\n    buildDepGraph().then(graph => {\n      alertsManager = graph.domain.alerts\n\n      this.setState({\n        lastUpdated: alertsManager.lastUpdated(),\n        alertCounts: alertsManager.alertCounts(),\n        alerts: alertsManager.alerts(),\n        getAlertDetails: alertsManager.alertDetails\n      })\n    })\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <Header />\n        <div className='content'>\n          {(this.state.alerts || []).length > 0\n            ? (\n              <SearchResults\n                results={this.state.alerts}\n                getAlertDetails={this.state.getAlertDetails}\n              />\n            )\n            : <EmptyContent />\n          }\n        </div>\n        <Footer alerts={this.state.alertCounts} lastUpdate={this.state.lastUpdated} />\n      </div>\n    )\n  }\n}\n\nexport { App }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}